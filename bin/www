#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('derp:server');
var fs = require('fs');
var http = require('http');
var socketio = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

var io = socketio.listen(server);
app.set('socketio', io);
app.set('server', server);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var log = fs.open('./msg.log', 'a+', function(err) {});
var msg_log = [];
var num_users = 0;
/**
 * Socket.io server-side code.
 */
io.on('connection', function(socket) {
  console.log('Client connected...');

  socket.on('join', function() {
    if (num_users == 0) {
      console.log('Reading contents of log file to memory....');
      var json_log = fs.readFileSync('./msg.log', 'utf8').replace(/}{/g,'},{');
      msg_log = JSON.parse('['+json_log+']');
      // History resets completely at 100
      if (msg_log.length > 100) {
        fs.unlinkSync(log);
        console.log('Deleted msg.log');
      }
    }
    num_users++;
    for (var i = 0; i < msg_log.length; i++) {
      socket.emit('broad', { mine: false, msg: msg_log[i].msg, time: msg_log[i].time });
    }
  });

  socket.on('disconnect', function() {
    if (--num_users <= 0) {
      for (var i = 0; i < msg_log.length; i++) {
        fs.appendFileSync('./msg.log', JSON.stringify(msg_log[i]));
        console.log('Appending file...');
      }
      msg_log = [];
    }
    console.log('A user has disconnected.');
  });

  socket.on('message', function(data) {
    socket.emit('broad', { mine: true, msg: data.msg, time: data.time });
    socket.broadcast.emit('broad', data);
    console.log('msg_log: '+msg_log);
    msg_log.push(data);
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
